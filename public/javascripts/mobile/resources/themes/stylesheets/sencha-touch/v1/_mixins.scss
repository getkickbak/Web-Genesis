//------------------------------------------------------------------------------
// Default Theme Function Overrides
//------------------------------------------------------------------------------
/**
 * Includes a base64-encoded icon for use within tab bars and buttons (With the component parameter iconMask: true).
 *
 *     @include pictos-iconmask('attachment');
 *
 * @param {string} $name The name of the icon to be included. This is to match the name of the icon file (located at resources/themes/images/default/pictos) without its extention (.svg).
 */
@include pictos-iconmask('refresh');
@mixin pictos-iconmask($name) {
}
@mixin toolbar-iconmask($name) {
  .x-tab .x-button-icon.#{$name},
  .x-button .x-button-icon.x-icon-mask.#{$name} {
    -webkit-mask-image: theme_image($theme-path-common + "/toolbar",  $name + ".svg");
  }
}

/**
 * Add a background radial gradient to a selector.
 *
 *     .my-element {
 *       @include background-gradient(green, 'recessed')
 *     }
 *
 * @param {start-color} The start color of the gradient.
 * @param {end-color} The end color of the gradient.
 * @param {position} The position to go with the gradient/image.
 * @param {image} The image to go with the gradient.
 */
@mixin custom-radial-gradient($start-color, $end-color, $position, $image : false) {
  background-color: $end-color;
  @if $image {
     @include background-image($image, radial-gradient($position, color_stops($start-color, $end-color)));
  } @else {
     @include background-image(radial-gradient($position, color_stops($start-color, $end-color)));    
  }
}

/**
 * Add a background radial gradient to a selector.
 *
 *     .my-element {
 *       @include background-gradient(green, 'recessed')
 *     }
 *
 * @param {start-color} The start color of the gradient.
 * @param {end-color} The end color of the gradient.
 * @param {position} The position to go with the gradient/image.
 * @param {image} The image to go with the gradient.
 */
@mixin custom-linear-gradient($start-color, $end-color, $position, $image : false) {
  background-color: $end-color;
  @if $image {
     @include background-image($image, linear-gradient($position, color_stops($start-color, $end-color)));
  } @else {
     @include background-image(linear-gradient($position, color_stops($start-color, $end-color)));    
  }
}

/**
 * Add a background radial gradient to a selector.
 *
 *     .my-element {
 *       @include background-gradient(green, 'recessed')
 *     }
 *
 * @param {bg-color} The start bg color of the gradient.
 * @param {position} The position to go with the gradient/image.
 * @param {image} The image to go with the gradient.
 * @param {type} predefined custom style settings.
 */
@mixin custom-background-gradient($bg-color, $position : 'top', $image : false, $type : 'smooth') {
  background-color: darken($bg-color, 15%);
  @if $image {
     @if $type == smooth {
        @include background-image($image, linear-gradient($position, color_stops($bg-color 30%, darken($bg-color, 20%))));
     } @else if $type == recessed {
        @include background-image($image, linear-gradient($position, color_stops(darken($bg-color, 10%), darken($bg-color, 5%) 10%, $bg-color 65%, lighten($bg-color, .5%))));
     }
     @else
     {
        @include background-gradient($bg-color, $type, $position, $contrast: 1);
     }
  } @else {
     @if $type == smooth {
        @include background-image(linear-gradient($position, color_stops($bg-color 30%, darken($bg-color, 20%))));    
     } @else if $type == recessed {
        @include background-image(linear-gradient($position, color_stops(darken($bg-color, 10%), darken($bg-color, 5%) 10%, $bg-color 65%, lighten($bg-color, .5%))));
     }
     @else
     {
        @include background-gradient($bg-color, $type, $position, $contrast: 1);
     }
  }
}

//------------------------------------------------------------------------------
// Toolbar CSS
//------------------------------------------------------------------------------
/**
 * Includes the default styles for toolbar buttons, mostly used as a helper function.
 *
 * @param {color} $bg-color Base color to be used for the button.
 * @param {color} $type Gradient style for the button, will automatically use "recessed" when pressed.
 */
@mixin toolbar-button($bg-color, $type: $button-gradient){
  & {
    border: 1px solid $GreyEnd;
    @include color-by-background($bg-color, 75%);
    @include custom-background-gradient($bg-color, top, false, $type);

    .x-button-icon.x-icon-mask {
      @include mask-by-background($bg-color);
    }

    &.x-button-pressing, &.x-button-pressed, &.x-button-active {
       &, &:after {
          @include custom-background-gradient(darken($bg-color, 7%), top, false, 'recessed');
          //@include background-gradient(darken($bg-color, 7%), 'recessed');
       }
       @if $include-highlights {
          -webkit-box-shadow: inset saturate(darken($bg-color, 15%), 5%) 0 0 .1em, rgba(#fff, .1) 0 .1em 0;
       }
    }        
  }
  .x-toolbar & {
    background:transparent;
    border: 1px solid $Grey;
    
    // This one here is the only line we need to add:
    -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.3), 0 1px 1px rgba(255, 255, 255, 0.3) !important;    
    
    &.x-button-back:before, &.x-button-forward:after {
       background:$Grey;
       //background: darken($bg-color, 20%);
    }

    //&.x-button-back, &.x-button-forward, &.x-button-back:after, &.x-button-forward:after {
    &.x-button-back, &.x-button-forward {
      background:transparent;
      border-left: 1px solid transparent;
    }
  }
}

@mixin sencha-button-ui($ui-label, $color, $gradient: $button-gradient) {
  .x-button.x-button-#{$ui-label}, .x-button.x-button-#{$ui-label}-round, .x-button.x-button-#{$ui-label}-small, .x-button.x-button-#{$ui-label}-large {
     @include toolbar-button($color, $gradient);
     .x-button-icon.x-icon-mask {
        @include mask-by-background($color, 20%, $tabs-bar-gradient);
     }
     //border: 1px solid darken($color, 20%);
     border: 1px solid $color !important;
     //border-top-color: darken($color, 15%) !important;
  }

  .x-button.x-button-#{$ui-label}-round {
     @extend .x-button-round;
  }

  .x-button.x-button-#{$ui-label}-small {
     @extend .x-button-small;
  }
  .x-button.x-button-#{$ui-label}-large {
     @extend .x-button-large;
  }
}

@mixin listmark($color: #000){
  @extend .x-listmark-base;
  background-color: $color;
}

@mixin badge-panel-icon($ui-label, $start-color, $end-color, $position, $image, $ui-prefix : ".badgephoto") {
   #{$ui-prefix}-#{$ui-label}:before {
      @include custom-linear-gradient($start-color, $end-color, $position, $image);
   }
}

//------------------------------------------------------------------------------
// Unit Conversion
//------------------------------------------------------------------------------
@function calc-em($target, $context) {
  @return ($target / $context) * 1em;
}

@function calc-px-em($target-px, $target-em, $fontsize) {
  @return (($target-px/$defaultFontSize/$fontsize*1em) + ($target-em/$fontsize*1em));
}
 